import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;

/**
 * Applet that displays the game
 * @author Zach Cotter
 */
public class TetrisFrame extends JApplet {

    private World world;
    public static JButton gameButton;
    private JButton highScoresButton;
    private ButtonPanel buttonPanel;

    private void refocus(){
        this.requestFocusInWindow();
    }

    /**
     * Sets up the JApplet and World.
     */
    public TetrisFrame() {
        world = new World();
        //this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setLayout(new BorderLayout());
        buttonPanel = new ButtonPanel();
        this.setSize((int) world.getSize().getWidth() + 28 + 40,
                     (int) world.getSize().getHeight() + 50 + 40);
        this.add(world);

        this.add(buttonPanel, BorderLayout.PAGE_END);
        this.setFocusable(true);
        this.addKeyListener(new KeyActionListener());
        this.setVisible(true);
    }

    /**
     * Panel to hold the buttons
     */
    private class ButtonPanel extends JPanel {

        /**
         * initiates the button panel
         */
        public ButtonPanel() {

            gameButton = new JButton("New Game");
            highScoresButton = new JButton("High Scores");
            gameButton.addActionListener(new GameButtonActionListener());
            highScoresButton.addActionListener(
                    new HighScoresButtonActionListener());
            this.setLayout(new GridLayout(2,
                                          1));
            this.add(gameButton);
            this.add(highScoresButton);
        }

        /**
         * Action listener for the game button
         */
        private class GameButtonActionListener implements ActionListener {

            /**
             * Responds to the game button being pressed
             * @param e The action event generated by the button press
             */
            @Override
            public void actionPerformed(ActionEvent e) {
                refocus();
                if (!world.isGameInProgress()) {
                    world.startGame();
                }
                else if (world.isPaused()) {
                    world.unpause();
                }
                else if (!world.isPaused()) {
                    world.pause();
                }
                refocus();
            }
        }

        /**
         * Action listener for the High Score button
         */
        private class HighScoresButtonActionListener implements ActionListener {

            @Override
            public void actionPerformed(ActionEvent e) {
                new HighScoreTableFrame().setVisible(true);
            }
        }
        //action listeners pass to old code
    }

    /**
     * Frame for displaying the high score table
     */
    private class HighScoreTableFrame extends JFrame{
        private JTextArea highScoreLabel;
        public HighScoreTableFrame(){
            HighScore h = new HighScore();
            this.setLayout(new GridLayout(1,1,10,10));
            highScoreLabel = new JTextArea(h.toString());
            highScoreLabel.setFont(highScoreLabel.getFont().deriveFont(
                    (float) 20));
            highScoreLabel.setEditable(false);
            this.add(highScoreLabel);
            this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            //this.setSize(highScoreLabel.getPreferredSize());
            this.setSize((int)this.getPreferredSize().getWidth() + 200, (int) this.getPreferredSize().getHeight() + 20);
        }

    }

    /**
     * Passes KeyEvents that throw KeyAdapter.keyPressed() to the World.
     */
    public class KeyActionListener extends KeyAdapter {

        /**
         * Passes the provided KeyEvent to the World
         * @param e KeyEvent generated by user.
         */
        @Override
        public void keyPressed(KeyEvent e) {
            int keyCode = e.getKeyCode();
            if (keyCode == KeyEvent.VK_LEFT) {
                world.throwLeftwardAction();
            }
            if (keyCode == KeyEvent.VK_RIGHT) {
                world.throwRightwardAction();
            }
            if (keyCode == KeyEvent.VK_DOWN) {
                world.throwDownwardAction();
            }
            if (keyCode == KeyEvent.VK_A) {
                world.throwCounterClockwiseRotationAction();
            }
            if (keyCode == KeyEvent.VK_S) {
                world.throwClockwiseRotationAction();
            }
        }
    }

    /**
     * Global function for determining if a Coordinate or Block location is
     * in the bounds of the grid.
     * @param x int representing x value of Coordinate or Block location
     * @param y int representing y value of Coordinate or Block location
     * @return True if both values are within the bounds of the Tetris grid,
     * @return False otherwise.
     */
    public static boolean inbounds(int x,
                                   int y) {
        return ((x >= 0)
                && (x < World.GRID_WIDTH)
                && (y >= 0)
                && (y < World.GRID_HEIGHT));
    }
}
